[cells]
prelude = buck/prelude
none = none

[external_cells]
# use the built-in prelude that is packaged inside of the buck2 executable. at
# any time we could vendor it, or use a 'git' cell, if we needed to apply custom
# patches
prelude = bundled

[cell_aliases]
# these aliases are all required by the upstream buck2 prelude, with stubs for
# meta-specific cells. 'config//' is occasionally useful for select() calls
config = prelude
buck = none
fbcode = none
fbsource = none

[buck2]
# use sha256 since everything supports it. XXX FIXME (aseipp): blake3?
digest_algorithms = SHA256

# These options are used to configure a "graph sketch" that roughly keeps track
# of the size of the underlying graphs that buck2 uses. turn these on; they're
# emitted as part of the build reports.
log_total_configured_graph_sketch = true
log_total_configured_graph_unconfigured_sketch = true
log_configured_graph_unconfigured_sketch = true

# defers writes to the end of actions to help improve performance
defer_write_actions = true

# deferred materialization requires that cache outputs never expire. if they do,
# a command might fail if it expects a hit on an object that was supposed to be
# an input. in that case, the buck2d daemon needs to restart to 'purge' its
# knowledge of that object. this enables that.
restarter = true

# enable checking the peak memory in the interpreter, and also set a byte limit
# for the interpreter. this is useful for catching runaway memory usage in BUILD
# files just in case people start going crazy with them.
check_starlark_peak_memory = true
# also, enforce a max callstack size to prevent ridiculous stack sizes and
# put a limit on how deep/abstract things can get.
starlark_max_callstack_size = 50

# default limit is 5MiB = 5 * 1024 * 1024 = 5242880 bytes. this is used by
# starlark_memory_limit() by default if no limit is specified.
default_starlark_peak_memory = 5242880

[build]
# set the default execution platform for builds on this machine. NOTE: this
# platform definition is where remote execution (optionally) is enabled via
# ExecutionPlatformRegistrationInfo
execution_platforms = root//buck/platforms:default

[parser]
# set the default execution platform for several target patterns. this is
# required; the main documentation for the format is the source code, I think...
target_platform_detector_spec = \
  target:cellar//...->root//buck/platforms:default \
  target:root//...->root//buck/platforms:default \
  target:third-party//...->root//buck/platforms:default \
  target:tilde//...->root//buck/platforms:default \
  target:toolchains//...->root//buck/platforms:default

[project]
# things that should not be scanned by buck2 for file changes. if you notice
# something strange is being scanned, it might be worth adding here.
ignore = \
  .jj, \
  .git, \
  .direnv, \
  .watchman-cookie**, \
  .gdb_history**
